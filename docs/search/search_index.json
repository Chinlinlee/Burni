{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Burni documentation \ud83d\udea7 work in progress Getting Started Installation Configuration Deploy","title":"Home"},{"location":"#burni-documentation","text":"","title":"Burni documentation"},{"location":"#work-in-progress","text":"","title":"\ud83d\udea7 work in progress"},{"location":"#getting-started","text":"Installation Configuration Deploy","title":"Getting Started"},{"location":"Getting%20started/Configuration/","text":"Configuration config\\config.js Note This file is config what resources you want to support. If you want to support all resources, you can run command below: node config/generate-allResources.js This will generate config.js for all resources. module . exports = { // add the resource name that you need \"Patient\" : { \"interaction\" : { \"read\" : true , \"vread\" : true , \"update\" : true , \"delete\" : true , \"history\" : true , \"create\" : true , \"search\" : true } } } dotenv .env in root path. MONGODB_NAME=\"dbName\" MONGODB_HOSTS=[\"mongodb\"] MONGODB_PORTS=[27017] MONGODB_USER=\"myAdmin\" MONGODB_PASSWORD=\"MymongoAdmin1\" MONGODB_IS_SHARDING_MODE=false MONGODB_SLAVEMODE=false SERVER_PORT=8080 FHIRSERVER_HOST=\"localhost\" FHIRSERVER_PORT=8080 #use by creating bundle url FHIRSERVER_APIPATH=\"fhir\" #If u want to use token auth, add below. ENABLE_TOKEN_AUTH=true ADMIN_LOGIN_PATH=\"adminLogin\" ADMIN_USERNAME=\"adminUsername\" ADMIN_PASSWORD=\"adminPassword\" ENABLE_CHECK_ALL_RESOURCE_ID=false #true that want to check resource id cross all resource ENABLE_CHECK_REFERENCE #true that want to check reference is exist in resource content Generate code After configuration above, you need to run script below to generate js code of API and mongoose model. npm run build Warning TypeError: genParamFunc[type] is not a function is meaning that method of search parameter not support now.","title":"Configuration"},{"location":"Getting%20started/Configuration/#configuration","text":"","title":"Configuration"},{"location":"Getting%20started/Configuration/#configconfigjs","text":"Note This file is config what resources you want to support. If you want to support all resources, you can run command below: node config/generate-allResources.js This will generate config.js for all resources. module . exports = { // add the resource name that you need \"Patient\" : { \"interaction\" : { \"read\" : true , \"vread\" : true , \"update\" : true , \"delete\" : true , \"history\" : true , \"create\" : true , \"search\" : true } } }","title":"config\\config.js"},{"location":"Getting%20started/Configuration/#dotenv","text":".env in root path. MONGODB_NAME=\"dbName\" MONGODB_HOSTS=[\"mongodb\"] MONGODB_PORTS=[27017] MONGODB_USER=\"myAdmin\" MONGODB_PASSWORD=\"MymongoAdmin1\" MONGODB_IS_SHARDING_MODE=false MONGODB_SLAVEMODE=false SERVER_PORT=8080 FHIRSERVER_HOST=\"localhost\" FHIRSERVER_PORT=8080 #use by creating bundle url FHIRSERVER_APIPATH=\"fhir\" #If u want to use token auth, add below. ENABLE_TOKEN_AUTH=true ADMIN_LOGIN_PATH=\"adminLogin\" ADMIN_USERNAME=\"adminUsername\" ADMIN_PASSWORD=\"adminPassword\" ENABLE_CHECK_ALL_RESOURCE_ID=false #true that want to check resource id cross all resource ENABLE_CHECK_REFERENCE #true that want to check reference is exist in resource content","title":"dotenv"},{"location":"Getting%20started/Configuration/#generate-code","text":"After configuration above, you need to run script below to generate js code of API and mongoose model. npm run build Warning TypeError: genParamFunc[type] is not a function is meaning that method of search parameter not support now.","title":"Generate code"},{"location":"Getting%20started/Deploy/","text":"Deploy node server.js","title":"Deploy"},{"location":"Getting%20started/Deploy/#deploy","text":"node server.js","title":"Deploy"},{"location":"Getting%20started/Installation/","text":"Installation With git Clone from git bash git clone https://github.com/Chinlinlee/Burni.git Install dependencies bash npm install after installation, let's starting configuration","title":"Installation"},{"location":"Getting%20started/Installation/#installation","text":"","title":"Installation"},{"location":"Getting%20started/Installation/#with-git","text":"Clone from git bash git clone https://github.com/Chinlinlee/Burni.git Install dependencies bash npm install after installation, let's starting configuration","title":"With git"},{"location":"models/FHIR/searchParameterQueryHandler/","text":"Functions getStringQuery(query, paramsSearchFields, queryFieldName) getAddressQuery(query, queryFieldName) getNameQuery(query, queryFieldName) getTokenQuery(query, paramsSearchFields, queryFieldName) getPolyTokenQuery(query, paramsSearchFields, queryFieldName, paramsSearchFunc) getNumberQuery(query, paramsSearchFields, queryFieldName) getPolyDateQuery(query, paramsSearchFields, queryFieldName, paramsSearchFunc) getStringQuery(query, paramsSearchFields, queryFieldName) Kind : global function Param Type Description query string The request query object paramsSearchFields Array.<string> The fields of search parameter that in resource queryFieldName string The name of search parameter Example (Example of `address-city` of search parameter of the Patient resource) // refresh query object to // { // \"$and\": [ // { // \"$or\": [ // { // \"address.city\": { // \"$regex\": /^PleasantVille/gi // } // } // ] // } // ] // } getStringQuery ( { \"address-city\" : \"PleasantVille\" , \"gender\" : \"male\" , \"$and\" : [] }, [ \"address.city\" ], \"address-city\" ); getAddressQuery(query, queryFieldName) Kind : global function Param Type Description query string The request query object queryFieldName string The name of search parameter Example (Example of `address` of search parameter of the Patient resource) // refresh query object to // { // \"$and\": [ // { // \"$or\": [ // { // \"address.line\": { // \"$regex\": /^PleasantVille/gi // } // }, // { // \"address.city\": { // \"$regex\": /^PleasantVille/gi // } // }, // { // \"address.district\": { // \"$regex\": /^PleasantVille/gi // } // }, // { // \"address.state\": { // \"$regex\": /^PleasantVille/gi // } // }, // { // \"address.postalCode\": { // \"$regex\": /^PleasantVille/gi // } // }, // { // \"address.country\": { // \"$regex\": /^PleasantVille/gi // } // } // ] // } // ] // } getAddressQuery ( { \"address\" : \"PleasantVille\" , \"gender\" : \"male\" , \"$and\" : [] }, \"address\" ); getNameQuery(query, queryFieldName) Kind : global function Param Type Description query string The request query object queryFieldName string The name of search parameter Example (Example of `name` of search parameter of the Patient resource) // refresh query object to // { // \"$and\": [ // { // \"$or\": [ // { // \"$or\": [ // { // \"name.text\": { // \"$regex\": /^Chalmers/gi // } // }, // { // \"name.family\": { // \"$regex\": /^Chalmers/gi // } // }, // { // \"name.given\": { // \"$regex\": /^Chalmers/gi // } // }, // { // \"name.suffix\": { // \"$regex\": /^Chalmers/gi // } // }, // { // \"name.prefix\": { // \"$regex\": /^Chalmers/gi // } // } // ] // } // ] // } // ] // } Example getNameQuery ( { \"name\" : \"Chalmers\" }, [ \"name\" ], \"name\" ); getTokenQuery(query, paramsSearchFields, queryFieldName) Kind : global function Param Type Description query string The request query object that in resource paramsSearchFields Array.<string> The fields of search parameter that in resource queryFieldName string The name of search parameter getPolyTokenQuery(query, paramsSearchFields, queryFieldName, paramsSearchFunc) Kind : global function Param Type Description query Object The request query object paramsSearchFields Array.<string> The fields of search parameters that in resource queryFieldName string The name of search parameter paramsSearchFunc function parameter search function corresponds to data type e.g. code, codeable concept Example (Example of `address-use` of search parameter of the Patient resource) // refresh query object to // { // \"$and\": [ // { // \"$or\": [ // { // \"$or\": [ // { // \"address.use.system\": \"home\" //because some data types have system // }, // { // \"address.use\": \"home\" // } // ] // } // ] // } // ] // } getPolyTokenQuery ( { \"address-use\" : \"home\" }, [ \"address.use\" ], \"address-use\" , ( query )=> { try { queryHandler . getStringQuery ( query , paramsSearchFields , * \"address-city\" ); } catch ( e ) { console . error ( e ); throw e ; } }); getNumberQuery(query, paramsSearchFields, queryFieldName) Kind : global function Param Type Description query string The request query object paramsSearchFields Array.<string> The fields of search parameters that in resource queryFieldName string The name of search parameter Example (Example of `variant-start` of search parameter of the Molecularsequence resource) // refresh query object to // { // \"$and\": [ // { // \"$or\": [ // { // \"variant.start\": { // \"$eq\": 22125503 // } // } // ] // } // ] // } getNumberQuery ( { \"$and\" : [], \"variant-start\" : 22125503 }, [ \"variant.start\" ], \"variant-start\" ); getPolyDateQuery(query, paramsSearchFields, queryFieldName, paramsSearchFunc) Kind : global function Param Type Description query Object The request query object paramsSearchFields string The fields of search parameters that in resource queryFieldName string The name of search parameter paramsSearchFunc function parameter search function corresponds to data type e.g. date, dateTime","title":"searchParameterQueryHandler"},{"location":"models/FHIR/searchParameterQueryHandler/#functions","text":"getStringQuery(query, paramsSearchFields, queryFieldName) getAddressQuery(query, queryFieldName) getNameQuery(query, queryFieldName) getTokenQuery(query, paramsSearchFields, queryFieldName) getPolyTokenQuery(query, paramsSearchFields, queryFieldName, paramsSearchFunc) getNumberQuery(query, paramsSearchFields, queryFieldName) getPolyDateQuery(query, paramsSearchFields, queryFieldName, paramsSearchFunc)","title":"Functions"},{"location":"models/FHIR/searchParameterQueryHandler/#getstringqueryquery-paramssearchfields-queryfieldname","text":"Kind : global function Param Type Description query string The request query object paramsSearchFields Array.<string> The fields of search parameter that in resource queryFieldName string The name of search parameter Example (Example of `address-city` of search parameter of the Patient resource) // refresh query object to // { // \"$and\": [ // { // \"$or\": [ // { // \"address.city\": { // \"$regex\": /^PleasantVille/gi // } // } // ] // } // ] // } getStringQuery ( { \"address-city\" : \"PleasantVille\" , \"gender\" : \"male\" , \"$and\" : [] }, [ \"address.city\" ], \"address-city\" );","title":"getStringQuery(query, paramsSearchFields, queryFieldName)"},{"location":"models/FHIR/searchParameterQueryHandler/#getaddressqueryquery-queryfieldname","text":"Kind : global function Param Type Description query string The request query object queryFieldName string The name of search parameter Example (Example of `address` of search parameter of the Patient resource) // refresh query object to // { // \"$and\": [ // { // \"$or\": [ // { // \"address.line\": { // \"$regex\": /^PleasantVille/gi // } // }, // { // \"address.city\": { // \"$regex\": /^PleasantVille/gi // } // }, // { // \"address.district\": { // \"$regex\": /^PleasantVille/gi // } // }, // { // \"address.state\": { // \"$regex\": /^PleasantVille/gi // } // }, // { // \"address.postalCode\": { // \"$regex\": /^PleasantVille/gi // } // }, // { // \"address.country\": { // \"$regex\": /^PleasantVille/gi // } // } // ] // } // ] // } getAddressQuery ( { \"address\" : \"PleasantVille\" , \"gender\" : \"male\" , \"$and\" : [] }, \"address\" );","title":"getAddressQuery(query, queryFieldName)"},{"location":"models/FHIR/searchParameterQueryHandler/#getnamequeryquery-queryfieldname","text":"Kind : global function Param Type Description query string The request query object queryFieldName string The name of search parameter Example (Example of `name` of search parameter of the Patient resource) // refresh query object to // { // \"$and\": [ // { // \"$or\": [ // { // \"$or\": [ // { // \"name.text\": { // \"$regex\": /^Chalmers/gi // } // }, // { // \"name.family\": { // \"$regex\": /^Chalmers/gi // } // }, // { // \"name.given\": { // \"$regex\": /^Chalmers/gi // } // }, // { // \"name.suffix\": { // \"$regex\": /^Chalmers/gi // } // }, // { // \"name.prefix\": { // \"$regex\": /^Chalmers/gi // } // } // ] // } // ] // } // ] // } Example getNameQuery ( { \"name\" : \"Chalmers\" }, [ \"name\" ], \"name\" );","title":"getNameQuery(query, queryFieldName)"},{"location":"models/FHIR/searchParameterQueryHandler/#gettokenqueryquery-paramssearchfields-queryfieldname","text":"Kind : global function Param Type Description query string The request query object that in resource paramsSearchFields Array.<string> The fields of search parameter that in resource queryFieldName string The name of search parameter","title":"getTokenQuery(query, paramsSearchFields, queryFieldName)"},{"location":"models/FHIR/searchParameterQueryHandler/#getpolytokenqueryquery-paramssearchfields-queryfieldname-paramssearchfunc","text":"Kind : global function Param Type Description query Object The request query object paramsSearchFields Array.<string> The fields of search parameters that in resource queryFieldName string The name of search parameter paramsSearchFunc function parameter search function corresponds to data type e.g. code, codeable concept Example (Example of `address-use` of search parameter of the Patient resource) // refresh query object to // { // \"$and\": [ // { // \"$or\": [ // { // \"$or\": [ // { // \"address.use.system\": \"home\" //because some data types have system // }, // { // \"address.use\": \"home\" // } // ] // } // ] // } // ] // } getPolyTokenQuery ( { \"address-use\" : \"home\" }, [ \"address.use\" ], \"address-use\" , ( query )=> { try { queryHandler . getStringQuery ( query , paramsSearchFields , * \"address-city\" ); } catch ( e ) { console . error ( e ); throw e ; } });","title":"getPolyTokenQuery(query, paramsSearchFields, queryFieldName, paramsSearchFunc)"},{"location":"models/FHIR/searchParameterQueryHandler/#getnumberqueryquery-paramssearchfields-queryfieldname","text":"Kind : global function Param Type Description query string The request query object paramsSearchFields Array.<string> The fields of search parameters that in resource queryFieldName string The name of search parameter Example (Example of `variant-start` of search parameter of the Molecularsequence resource) // refresh query object to // { // \"$and\": [ // { // \"$or\": [ // { // \"variant.start\": { // \"$eq\": 22125503 // } // } // ] // } // ] // } getNumberQuery ( { \"$and\" : [], \"variant-start\" : 22125503 }, [ \"variant.start\" ], \"variant-start\" );","title":"getNumberQuery(query, paramsSearchFields, queryFieldName)"},{"location":"models/FHIR/searchParameterQueryHandler/#getpolydatequeryquery-paramssearchfields-queryfieldname-paramssearchfunc","text":"Kind : global function Param Type Description query Object The request query object paramsSearchFields string The fields of search parameters that in resource queryFieldName string The name of search parameter paramsSearchFunc function parameter search function corresponds to data type e.g. date, dateTime","title":"getPolyDateQuery(query, paramsSearchFields, queryFieldName, paramsSearchFunc)"}]}